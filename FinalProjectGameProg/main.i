# 1 "main.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "main.c"
# 1 "gba.h" 1
# 143 "gba.h"
typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;
typedef int s32;
typedef short s16;
# 2 "main.c" 2
# 1 "robotsprite.h" 1
# 9 "robotsprite.h"
const u16 robotspriteData[] = {
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x4C00, 0x4C4C, 0x4C4C, 0x0000, 0x4C00, 0x4C4D, 0x4D4D,
                    0x0000, 0x4C00, 0x4D4D, 0x4D4D, 0x0000, 0x4C00, 0x4D4D, 0x4D4D, 0x0000, 0x4C00,
                    0x4D4D, 0x2B20, 0x0000, 0x4C00, 0x4D4D, 0x4D4D, 0x0000, 0x4C4C, 0x4D4C, 0x4C4C,
                    0x4C4C, 0x4D4C, 0x4D4D, 0x4D4D, 0x4C4C, 0x004C, 0x0000, 0x0000, 0x4D4C, 0x004C,
                    0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000,
                    0x2B20, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x004C,
                    0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x4C4C, 0x4C4D, 0x4C4D, 0x024D, 0x4D4C, 0x4D4D, 0x4D4D, 0x4D4D, 0x4C4C, 0x4C4D,
                    0x4C4D, 0x4C4C, 0x4D4C, 0x4D4D, 0x4C4D, 0x4C4C, 0x4C4C, 0x4C4D, 0x4C4D, 0x4C4C,
                    0x4C4E, 0x4D4C, 0x4C4D, 0x4C4C, 0x4E2B, 0x4D4C, 0x4C4D, 0x4C4C, 0x4E2B, 0x4D4C,
                    0x4C4D, 0x4C4C, 0x0202, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x4C00,
                    0x4C4D, 0x4C4C, 0x4C4C, 0x4C4C, 0x4D4D, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4D, 0x004C,
                    0x0000, 0x4C00, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x004C, 0x0000, 0x0000,
                    0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x0000, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4C4C, 0x0000,
                    0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4C4E, 0x4D4C,
                    0x4C4D, 0x4C4C, 0x4C4C, 0x4D4D, 0x4D4D, 0x4D4D, 0x4D4C, 0x4C4D, 0x4C4D, 0x4C4D,
                    0x4D4C, 0x4D4D, 0x4D4D, 0x4D4D, 0x4C4C, 0x4C4D, 0x4C4D, 0x4C4D, 0x4C4C, 0x4C4C,
                    0x4C4C, 0x4C4C, 0x4C00, 0x4D4D, 0x004C, 0x4D4C, 0x4C00, 0x4D4D, 0x004C, 0x4D4C,
                    0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x004C,
                    0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x004C, 0x0000, 0x0000,
                    0x4C4C, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x0000, 0x0000, 0x0000, 0x4C4D, 0x0000,
                    0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x4C4C, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4C00, 0x4D4D, 0x004C, 0x4D4C,
                    0x4C00, 0x4D4D, 0x004C, 0x4D4C, 0x4C00, 0x4C4C, 0x004C, 0x4C4C, 0x4C00, 0x4D4D,
                    0x004C, 0x4D4C, 0x4C00, 0x4D4D, 0x004C, 0x4D4C, 0x4C4C, 0x4D4D, 0x4C4C, 0x4D4C,
                    0x4D4C, 0x4D4D, 0x4C4D, 0x4D4D, 0x4D4C, 0x4D4D, 0x4C4D, 0x4D4D, 0x4C4D, 0x0000,
                    0x0000, 0x0000, 0x4C4D, 0x0000, 0x0000, 0x0000, 0x4C4C, 0x0000, 0x0000, 0x0000,
                    0x4C4D, 0x0000, 0x0000, 0x0000, 0x4C4D, 0x0000, 0x0000, 0x0000, 0x4C4D, 0x004C,
                    0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4C00, 0x4C4C, 0x4C4C, 0x0000, 0x4C00,
                    0x4C4D, 0x4D4D, 0x0000, 0x4C00, 0x4D4D, 0x4D4D, 0x0000, 0x4C00, 0x4D4D, 0x4D4D,
                    0x0000, 0x4C00, 0x4D4D, 0x0332, 0x0000, 0x4C00, 0x4D4D, 0x4D4D, 0x0000, 0x4C4C,
                    0x4D4C, 0x4C4C, 0x4C4C, 0x4D4C, 0x4D4D, 0x4D4D, 0x4C4C, 0x004C, 0x0000, 0x0000,
                    0x4D4C, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C,
                    0x0000, 0x0000, 0x0332, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000,
                    0x4C4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x4C4C, 0x4C4D, 0x4C4D, 0x274D, 0x4D4C, 0x4D4D, 0x4D4D, 0x4D4D,
                    0x4C4C, 0x4C4D, 0x4C4D, 0x4C4C, 0x4D4C, 0x4D4D, 0x4C4D, 0x4C4C, 0x4C4C, 0x4C4D,
                    0x4C4D, 0x4C4C, 0x4C4E, 0x4D4C, 0x4C4D, 0x4C4C, 0x4E27, 0x4D4C, 0x4C4D, 0x4C4C,
                    0x4E27, 0x4D4C, 0x4C4D, 0x4C4C, 0x2727, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C,
                    0x0000, 0x4C00, 0x4C4D, 0x4C4C, 0x4C4C, 0x4C4C, 0x4D4D, 0x4C4C, 0x4C4C, 0x4C4C,
                    0x4C4D, 0x004C, 0x0000, 0x4C00, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x004C,
                    0x0000, 0x0000, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x4C4C, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x4C4E, 0x4D4C, 0x4C4D, 0x4C4C, 0x4C4C, 0x4D4D, 0x4D4D, 0x4D4D, 0x4D4C, 0x4C4D,
                    0x4C4D, 0x4C4D, 0x4D4C, 0x4D4D, 0x4D4D, 0x4D4D, 0x4C4C, 0x4C4D, 0x4C4D, 0x4C4D,
                    0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C00, 0x4D4D, 0x004C, 0x4D4C, 0x4C00, 0x4D4D,
                    0x004C, 0x4D4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x4D4D, 0x004C, 0x0000, 0x0000,
                    0x4C4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x004C,
                    0x0000, 0x0000, 0x4C4C, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x0000, 0x0000, 0x0000,
                    0x4C4D, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x4C4C, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4C00, 0x4D4D,
                    0x004C, 0x4D4C, 0x4C00, 0x4D4D, 0x004C, 0x4D4C, 0x4C00, 0x4C4C, 0x004C, 0x4C4C,
                    0x4C00, 0x4D4D, 0x004C, 0x4D4C, 0x4C00, 0x4D4D, 0x004C, 0x4D4C, 0x4C4C, 0x4D4D,
                    0x4C4C, 0x4D4C, 0x4D4C, 0x4D4D, 0x4C4D, 0x4D4D, 0x4D4C, 0x4D4D, 0x4C4D, 0x4D4D,
                    0x4C4D, 0x0000, 0x0000, 0x0000, 0x4C4D, 0x0000, 0x0000, 0x0000, 0x4C4C, 0x0000,
                    0x0000, 0x0000, 0x4C4D, 0x0000, 0x0000, 0x0000, 0x4C4D, 0x0000, 0x0000, 0x0000,
                    0x4C4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4C00, 0x4C4C, 0x4C4C,
                    0x0000, 0x4C00, 0x4C4D, 0x4D4D, 0x0000, 0x4C00, 0x4D4D, 0x4D4D, 0x0000, 0x4C00,
                    0x4D4D, 0x4D4D, 0x0000, 0x4C00, 0x4D4D, 0x2B20, 0x0000, 0x4C00, 0x4D4D, 0x4D4D,
                    0x0000, 0x4C4C, 0x4D4C, 0x4C4C, 0x4C4C, 0x4D4C, 0x4D4D, 0x4D4D, 0x4C4C, 0x004C,
                    0x0000, 0x0000, 0x4D4C, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000,
                    0x4D4D, 0x004C, 0x0000, 0x0000, 0x2B20, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C,
                    0x0000, 0x0000, 0x4C4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x2B00, 0x2B2B, 0x2B2B, 0x0000, 0x272B, 0x2727, 0x2727,
                    0x2B00, 0x2727, 0x0202, 0x2727, 0x4C4C, 0x4C4D, 0x4C4D, 0x024D, 0x4D4C, 0x4D4D,
                    0x4D4D, 0x4D4D, 0x4C4C, 0x4C4D, 0x4C4D, 0x4C4C, 0x4D4C, 0x4D4D, 0x4C4D, 0x4C4C,
                    0x4C4C, 0x4C4D, 0x4C4D, 0x4C4C, 0x4C4E, 0x4D4C, 0x4C4D, 0x4C4C, 0x4E2B, 0x4D4C,
                    0x4C4D, 0x4C4C, 0x4E2B, 0x4D4C, 0x4C4D, 0x4C4C, 0x0202, 0x004C, 0x0000, 0x0000,
                    0x4D4D, 0x004C, 0x0000, 0x4C00, 0x4C4D, 0x4C4C, 0x4C4C, 0x4C4C, 0x4D4D, 0x4C4C,
                    0x4C4C, 0x4C4C, 0x4C4D, 0x004C, 0x0000, 0x4C00, 0x4D4D, 0x004C, 0x0000, 0x0000,
                    0x4C4D, 0x004C, 0x0000, 0x0000, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x4C4C, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x272B, 0x2727, 0x2B27, 0x0000, 0x2B00, 0x2B2B, 0x002B, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x4C00, 0x0000, 0x0000, 0x0000, 0x4C4C, 0x0000, 0x0000,
                    0x0000, 0x4D4C, 0x4C4E, 0x4D4C, 0x4C4D, 0x4C4C, 0x4C4C, 0x4D4D, 0x4D4D, 0x4D4D,
                    0x4D4C, 0x4C4D, 0x4C4D, 0x4C4D, 0x4D4C, 0x4D4D, 0x4D4D, 0x4D4D, 0x4D4C, 0x4C4D,
                    0x4C4D, 0x4C4D, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x4D4C, 0x4C4C, 0x4C00, 0x4D4D,
                    0x4C4C, 0x004C, 0x4C4C, 0x4D4D, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x4D4D, 0x004C,
                    0x0000, 0x0000, 0x4C4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000,
                    0x4C4D, 0x004C, 0x0000, 0x0000, 0x4C4C, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x0000,
                    0x0000, 0x0000, 0x4C4C, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000,
                    0x4C4C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4C00,
                    0x4C4C, 0x4D4D, 0x0000, 0x4C00, 0x4D4C, 0x4C4D, 0x0000, 0x4200, 0x4C4C, 0x4C4D,
                    0x0000, 0x4142, 0x4C42, 0x4C4C, 0x0000, 0x4242, 0x0000, 0x4C4C, 0x4200, 0x0000,
                    0x0000, 0x4C42, 0x0000, 0x0000, 0x4200, 0x4241, 0x0000, 0x0000, 0x4200, 0x0042,
                    0x4C4C, 0x4C00, 0x4D4C, 0x4C4D, 0x004C, 0x4D4C, 0x4D4C, 0x004C, 0x4C4C, 0x4D4D,
                    0x4C4C, 0x0000, 0x4D4D, 0x4D4D, 0x004C, 0x0000, 0x4D4D, 0x4C4D, 0x0000, 0x0000,
                    0x4C4C, 0x4C4C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4C00,
                    0x4C4C, 0x4C4C, 0x0000, 0x4C00, 0x4C4D, 0x4D4D, 0x0000, 0x4C00, 0x4D4D, 0x4D4D,
                    0x0000, 0x4C00, 0x4D4D, 0x4D4D, 0x0000, 0x4C00, 0x4D4D, 0x0332, 0x0000, 0x4C00,
                    0x4D4D, 0x4D4D, 0x0000, 0x4C4C, 0x4D4C, 0x4C4C, 0x4C4C, 0x4D4C, 0x4D4D, 0x4D4D,
                    0x4C4C, 0x004C, 0x0000, 0x0000, 0x4D4C, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C,
                    0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x0000, 0x0332, 0x004C, 0x0000, 0x0000,
                    0x4D4D, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2700, 0x2727, 0x2727, 0x0000, 0x2B27,
                    0x2B2B, 0x2B2B, 0x2700, 0x2B2B, 0x0202, 0x2B2B, 0x4C4C, 0x4C4D, 0x4C4D, 0x274D,
                    0x4D4C, 0x4D4D, 0x4D4D, 0x4D4D, 0x4C4C, 0x4C4D, 0x4C4D, 0x4C4C, 0x4D4C, 0x4D4D,
                    0x4C4D, 0x4C4C, 0x4C4C, 0x4C4D, 0x4C4D, 0x4C4C, 0x4C4E, 0x4D4C, 0x4C4D, 0x4C4C,
                    0x4E27, 0x4D4C, 0x4C4D, 0x4C4C, 0x4E27, 0x4D4C, 0x4C4D, 0x4C4C, 0x2727, 0x004C,
                    0x0000, 0x0000, 0x4D4D, 0x004C, 0x0000, 0x4C00, 0x4C4D, 0x4C4C, 0x4C4C, 0x4C4C,
                    0x4D4D, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4D, 0x004C, 0x0000, 0x4C00, 0x4D4D, 0x004C,
                    0x0000, 0x0000, 0x4C4D, 0x004C, 0x0000, 0x0000, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x4C4C, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x2B27, 0x2B2B, 0x272B, 0x0000, 0x2700, 0x2727, 0x0027,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4C00, 0x0000, 0x0000, 0x0000, 0x4C4C,
                    0x0000, 0x0000, 0x0000, 0x4D4C, 0x4C4E, 0x4D4C, 0x4C4D, 0x4C4C, 0x4C4C, 0x4D4D,
                    0x4D4D, 0x4D4D, 0x4D4C, 0x4C4D, 0x4C4D, 0x4C4D, 0x4D4C, 0x4D4D, 0x4D4D, 0x4D4D,
                    0x4C4C, 0x4C4D, 0x4C4D, 0x4C4D, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C, 0x4D4C, 0x4C4C,
                    0x4C00, 0x4D4D, 0x4C4C, 0x004C, 0x4C4C, 0x4D4D, 0x4C4C, 0x4C4C, 0x4C4C, 0x4C4C,
                    0x4D4D, 0x004C, 0x0000, 0x0000, 0x4C4D, 0x004C, 0x0000, 0x0000, 0x4D4D, 0x004C,
                    0x0000, 0x0000, 0x4C4D, 0x004C, 0x0000, 0x0000, 0x4C4C, 0x004C, 0x0000, 0x0000,
                    0x4C4D, 0x0000, 0x0000, 0x0000, 0x4C4C, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000,
                    0x0000, 0x0000, 0x4C4C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x4C00, 0x4C4C, 0x4D4D, 0x0000, 0x4C00, 0x4D4C, 0x4C4D, 0x0000, 0x4600,
                    0x4C4C, 0x4C4D, 0x0000, 0x4446, 0x4C46, 0x4C4C, 0x0000, 0x4646, 0x0000, 0x4C4C,
                    0x4600, 0x0000, 0x0000, 0x4C46, 0x0000, 0x0000, 0x4600, 0x4644, 0x0000, 0x0000,
                    0x4600, 0x0046, 0x4C4C, 0x4C00, 0x4D4C, 0x4C4D, 0x004C, 0x4D4C, 0x4D4C, 0x004C,
                    0x4C4C, 0x4D4D, 0x4C4C, 0x0000, 0x4D4D, 0x4D4D, 0x004C, 0x0000, 0x4D4D, 0x4C4D,
                    0x0000, 0x0000, 0x4C4C, 0x4C4C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x004C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x4200, 0x0000, 0x0000, 0x0000, 0x4200, 0x0000, 0x0000, 0x0000, 0x4242,
                    0x0000, 0x4442, 0x4444, 0x4444, 0x0000, 0x4442, 0x4445, 0x4545, 0x0000, 0x4442,
                    0x4545, 0x4545, 0x0000, 0x4442, 0x4545, 0x4545, 0x0000, 0x4442, 0x4545, 0x4741,
                    0x4242, 0x4442, 0x4545, 0x4545, 0x4242, 0x4444, 0x4544, 0x4444, 0x4444, 0x4544,
                    0x4545, 0x4545, 0x4444, 0x4244, 0x0000, 0x0000, 0x4544, 0x4244, 0x0000, 0x0000,
                    0x4545, 0x4244, 0x0000, 0x0000, 0x4545, 0x4244, 0x0000, 0x0000, 0x4741, 0x4244,
                    0x0042, 0x0000, 0x4545, 0x4244, 0x0042, 0x0000, 0x4445, 0x4244, 0x0042, 0x0000,
                    0x4545, 0x4244, 0x0042, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4242,
                    0x0000, 0x0000, 0x4200, 0x4242, 0x0000, 0x0000, 0x4200, 0x4242, 0x0000, 0x0000,
                    0x4200, 0x4242, 0x0000, 0x0000, 0x4200, 0x4242, 0x0000, 0x0000, 0x4242, 0x4242,
                    0x0000, 0x0000, 0x4242, 0x4242, 0x0000, 0x4200, 0x4242, 0x4242, 0x4444, 0x4445,
                    0x4445, 0x0D45, 0x4544, 0x4545, 0x4545, 0x4545, 0x4444, 0x4445, 0x4445, 0x4444,
                    0x4544, 0x4545, 0x4445, 0x4444, 0x4444, 0x4445, 0x4445, 0x4444, 0x4443, 0x4544,
                    0x4445, 0x4444, 0x4347, 0x4544, 0x4445, 0x4444, 0x4347, 0x4544, 0x4445, 0x4444,
                    0x0D0D, 0x4244, 0x4242, 0x4242, 0x4545, 0x4244, 0x4242, 0x4442, 0x4445, 0x4444,
                    0x4444, 0x4444, 0x4545, 0x4444, 0x4444, 0x4444, 0x4445, 0x4244, 0x4242, 0x4442,
                    0x4545, 0x0044, 0x0000, 0x4242, 0x4445, 0x4244, 0x4242, 0x4242, 0x4444, 0x4444,
                    0x4444, 0x4444, 0x4242, 0x0000, 0x0000, 0x0000, 0x4244, 0x0000, 0x0000, 0x0000,
                    0x4242, 0x0000, 0x0000, 0x0000, 0x4242, 0x0000, 0x0000, 0x0000, 0x4244, 0x0000,
                    0x0000, 0x0000, 0x4242, 0x0000, 0x0000, 0x0000, 0x4444, 0x0042, 0x0000, 0x0000,
                    0x4244, 0x0042, 0x0000, 0x0000, 0x0000, 0x4200, 0x4242, 0x4242, 0x0000, 0x4200,
                    0x4242, 0x4242, 0x0000, 0x4200, 0x4242, 0x4242, 0x0000, 0x4200, 0x4242, 0x4242,
                    0x0000, 0x4242, 0x4242, 0x4242, 0x0000, 0x4242, 0x4242, 0x4242, 0x0000, 0x4242,
                    0x4242, 0x4442, 0x0000, 0x4242, 0x4242, 0x4544, 0x4443, 0x4544, 0x4445, 0x4444,
                    0x4444, 0x4545, 0x4545, 0x4545, 0x4544, 0x4445, 0x4445, 0x4445, 0x4544, 0x4545,
                    0x4545, 0x4545, 0x4544, 0x4445, 0x4445, 0x4445, 0x4444, 0x4444, 0x4444, 0x4444,
                    0x4544, 0x4444, 0x4442, 0x4545, 0x4444, 0x4244, 0x4444, 0x4545, 0x4444, 0x4444,
                    0x4444, 0x4444, 0x4545, 0x4244, 0x4242, 0x4242, 0x4445, 0x4244, 0x0000, 0x4242,
                    0x4545, 0x4244, 0x0000, 0x0000, 0x4445, 0x4244, 0x0000, 0x0000, 0x4444, 0x4244,
                    0x0000, 0x0000, 0x4445, 0x4242, 0x0000, 0x0000, 0x4444, 0x0042, 0x0000, 0x0000,
                    0x4244, 0x0042, 0x0000, 0x0000, 0x4444, 0x0042, 0x0000, 0x0000, 0x4242, 0x0042,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x4242, 0x4442, 0x4545, 0x0000, 0x4242, 0x4544, 0x4445,
                    0x0000, 0x4242, 0x4444, 0x4445, 0x0000, 0x4142, 0x4442, 0x4444, 0x0000, 0x4242,
                    0x4242, 0x4444, 0x4200, 0x0000, 0x4200, 0x4442, 0x0000, 0x0000, 0x4200, 0x4241,
                    0x0000, 0x0000, 0x4200, 0x0042, 0x4444, 0x4442, 0x4544, 0x4445, 0x4244, 0x4544,
                    0x4544, 0x4244, 0x4444, 0x4545, 0x4444, 0x4242, 0x4545, 0x4545, 0x4244, 0x0042,
                    0x4545, 0x4445, 0x4242, 0x0000, 0x4444, 0x4244, 0x0042, 0x0000, 0x4242, 0x4242,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4244, 0x0042, 0x0000, 0x0000,
                    0x4242, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x4700, 0x0000, 0x0000, 0x0000, 0x4700, 0x0000, 0x0000,
                    0x0000, 0x4747, 0x0000, 0x4447, 0x4444, 0x4444, 0x0000, 0x4447, 0x4445, 0x4545,
                    0x0000, 0x4447, 0x4545, 0x4545, 0x0000, 0x4447, 0x4545, 0x4545, 0x0000, 0x4447,
                    0x4545, 0x4347, 0x4747, 0x4447, 0x4545, 0x4545, 0x4747, 0x4444, 0x4544, 0x4444,
                    0x4444, 0x4544, 0x4545, 0x4545, 0x4444, 0x4744, 0x0000, 0x0000, 0x4544, 0x4744,
                    0x0000, 0x0000, 0x4545, 0x4744, 0x0000, 0x0000, 0x4545, 0x4744, 0x0000, 0x0000,
                    0x4347, 0x4744, 0x0047, 0x0000, 0x4545, 0x4744, 0x0047, 0x0000, 0x4445, 0x4744,
                    0x0047, 0x0000, 0x4545, 0x4744, 0x0047, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x4747, 0x0000, 0x0000, 0x4700, 0x4747, 0x0000, 0x0000, 0x4700, 0x4747,
                    0x0000, 0x0000, 0x4700, 0x4747, 0x0000, 0x0000, 0x4700, 0x4747, 0x0000, 0x0000,
                    0x4747, 0x4747, 0x0000, 0x0000, 0x4747, 0x4747, 0x0000, 0x4700, 0x4747, 0x4747,
                    0x4444, 0x4445, 0x4445, 0x4145, 0x4544, 0x4545, 0x4545, 0x4545, 0x4444, 0x4445,
                    0x4445, 0x4444, 0x4544, 0x4545, 0x4445, 0x4444, 0x4444, 0x4445, 0x4445, 0x4444,
                    0x4443, 0x4544, 0x4445, 0x4444, 0x4341, 0x4544, 0x4445, 0x4444, 0x4341, 0x4544,
                    0x4445, 0x4444, 0x4141, 0x4744, 0x4747, 0x4747, 0x4545, 0x4744, 0x4747, 0x4447,
                    0x4445, 0x4444, 0x4444, 0x4444, 0x4545, 0x4444, 0x4444, 0x4444, 0x4445, 0x4744,
                    0x4747, 0x4447, 0x4545, 0x0044, 0x0000, 0x4747, 0x4445, 0x4744, 0x4747, 0x4747,
                    0x4444, 0x4444, 0x4444, 0x4444, 0x4747, 0x0000, 0x0000, 0x0000, 0x4744, 0x0000,
                    0x0000, 0x0000, 0x4747, 0x0000, 0x0000, 0x0000, 0x4747, 0x0000, 0x0000, 0x0000,
                    0x4744, 0x0000, 0x0000, 0x0000, 0x4747, 0x0000, 0x0000, 0x0000, 0x4444, 0x0047,
                    0x0000, 0x0000, 0x4744, 0x0047, 0x0000, 0x0000, 0x0000, 0x4700, 0x4747, 0x4747,
                    0x0000, 0x4700, 0x4747, 0x4747, 0x0000, 0x4700, 0x4747, 0x4747, 0x0000, 0x4700,
                    0x4747, 0x4747, 0x0000, 0x4747, 0x4747, 0x4747, 0x0000, 0x4747, 0x4747, 0x4747,
                    0x0000, 0x4747, 0x4747, 0x4447, 0x0000, 0x4747, 0x4747, 0x4544, 0x4443, 0x4544,
                    0x4445, 0x4444, 0x4444, 0x4545, 0x4545, 0x4545, 0x4544, 0x4445, 0x4445, 0x4445,
                    0x4544, 0x4545, 0x4545, 0x4545, 0x4544, 0x4445, 0x4445, 0x4445, 0x4444, 0x4444,
                    0x4444, 0x4444, 0x4544, 0x4444, 0x4447, 0x4545, 0x4444, 0x4744, 0x4444, 0x4545,
                    0x4444, 0x4444, 0x4444, 0x4444, 0x4545, 0x4744, 0x4747, 0x4747, 0x4445, 0x4744,
                    0x0000, 0x4747, 0x4545, 0x4744, 0x0000, 0x0000, 0x4445, 0x4744, 0x0000, 0x0000,
                    0x4444, 0x0044, 0x0000, 0x0000, 0x4445, 0x0047, 0x0000, 0x0000, 0x4444, 0x0047,
                    0x0000, 0x0000, 0x4744, 0x0047, 0x0000, 0x0000, 0x4444, 0x0047, 0x0000, 0x0000,
                    0x4747, 0x0047, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4747, 0x4447, 0x4545, 0x0000, 0x4747,
                    0x4544, 0x4445, 0x0000, 0x4747, 0x4444, 0x4445, 0x0000, 0x4247, 0x4447, 0x4444,
                    0x0000, 0x4747, 0x4747, 0x4444, 0x4700, 0x0000, 0x4700, 0x4447, 0x0000, 0x0000,
                    0x4700, 0x4742, 0x0000, 0x0000, 0x4700, 0x0047, 0x4444, 0x4447, 0x4544, 0x4445,
                    0x4744, 0x4544, 0x4544, 0x4744, 0x4444, 0x4545, 0x4444, 0x4747, 0x4545, 0x4545,
                    0x4744, 0x0047, 0x4545, 0x4445, 0x4747, 0x0000, 0x4444, 0x4744, 0x0047, 0x0000,
                    0x4747, 0x4747, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4744, 0x0047,
                    0x0000, 0x0000, 0x4747, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4200, 0x0000, 0x0000, 0x0000, 0x4200,
                    0x0000, 0x0000, 0x0000, 0x4242, 0x0000, 0x4442, 0x4444, 0x4444, 0x0000, 0x4442,
                    0x4445, 0x4545, 0x0000, 0x4442, 0x4545, 0x4545, 0x0000, 0x4442, 0x4545, 0x4545,
                    0x0000, 0x4442, 0x4545, 0x4741, 0x4242, 0x4442, 0x4545, 0x4545, 0x4242, 0x4444,
                    0x4544, 0x4444, 0x4444, 0x4544, 0x4545, 0x4545, 0x4444, 0x4244, 0x0000, 0x0000,
                    0x4544, 0x4244, 0x0000, 0x0000, 0x4545, 0x4244, 0x0000, 0x0000, 0x4545, 0x4244,
                    0x0000, 0x0000, 0x4741, 0x4244, 0x0042, 0x0000, 0x4545, 0x4244, 0x0042, 0x0000,
                    0x4445, 0x4244, 0x0042, 0x0000, 0x4545, 0x4244, 0x0042, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x4242, 0x0000, 0x0000, 0x4200, 0x4242, 0x0000, 0x0000,
                    0x4200, 0x4242, 0x0000, 0x0000, 0x4200, 0x4242, 0x0000, 0x0000, 0x4200, 0x4242,
                    0x0000, 0x0000, 0x4242, 0x4242, 0x0000, 0x0000, 0x4242, 0x4242, 0x0000, 0x4200,
                    0x4242, 0x4242, 0x4444, 0x4445, 0x4445, 0x0D45, 0x4544, 0x4545, 0x4545, 0x4545,
                    0x4444, 0x4445, 0x4445, 0x4444, 0x4544, 0x4545, 0x4445, 0x4444, 0x4444, 0x4445,
                    0x4445, 0x4444, 0x4443, 0x4544, 0x4445, 0x4444, 0x4347, 0x4544, 0x4445, 0x4444,
                    0x4347, 0x4544, 0x4445, 0x4444, 0x0D0D, 0x4244, 0x4242, 0x4242, 0x4545, 0x4244,
                    0x4242, 0x4442, 0x4445, 0x4444, 0x4444, 0x4444, 0x4545, 0x4444, 0x4444, 0x4444,
                    0x4445, 0x4244, 0x4242, 0x4442, 0x4545, 0x0044, 0x0000, 0x4242, 0x4445, 0x4244,
                    0x4242, 0x4242, 0x4444, 0x4444, 0x4444, 0x4444, 0x4242, 0x0000, 0x0000, 0x0000,
                    0x4244, 0x0000, 0x0000, 0x0000, 0x4242, 0x0000, 0x0000, 0x0000, 0x4242, 0x0000,
                    0x0000, 0x0000, 0x4244, 0x0000, 0x0000, 0x0000, 0x4242, 0x0000, 0x0000, 0x0000,
                    0x4444, 0x0042, 0x0000, 0x0000, 0x4244, 0x0042, 0x0000, 0x0000, 0x0000, 0x4200,
                    0x4242, 0x4242, 0x0000, 0x4242, 0x4242, 0x4242, 0x4200, 0x4242, 0x4242, 0x4242,
                    0x0000, 0x4200, 0x4242, 0x4242, 0x0000, 0x0000, 0x4242, 0x4242, 0x0000, 0x0000,
                    0x4200, 0x4242, 0x0000, 0x0000, 0x0000, 0x4242, 0x0000, 0x0000, 0x0000, 0x4200,
                    0x4443, 0x4544, 0x4445, 0x4444, 0x4444, 0x4545, 0x4545, 0x4545, 0x4544, 0x4445,
                    0x4445, 0x4445, 0x4544, 0x4545, 0x4545, 0x4545, 0x4544, 0x4445, 0x4445, 0x4445,
                    0x4444, 0x4444, 0x4444, 0x4444, 0x4544, 0x4545, 0x4244, 0x4444, 0x4444, 0x4545,
                    0x4444, 0x4442, 0x4444, 0x4444, 0x4444, 0x4444, 0x4545, 0x4244, 0x4242, 0x4242,
                    0x4445, 0x4244, 0x0000, 0x4242, 0x4545, 0x4244, 0x0000, 0x0000, 0x4445, 0x4244,
                    0x0000, 0x0000, 0x4444, 0x4244, 0x0000, 0x0000, 0x4445, 0x4244, 0x4242, 0x4242,
                    0x4444, 0x4445, 0x4242, 0x4242, 0x4244, 0x0042, 0x0000, 0x0000, 0x4444, 0x0042,
                    0x0000, 0x0000, 0x4242, 0x0042, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4200,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4442, 0x4544,
                    0x4445, 0x4244, 0x4242, 0x4442, 0x4445, 0x4445, 0x0000, 0x4242, 0x4444, 0x4545,
                    0x0000, 0x4200, 0x4442, 0x4545, 0x0000, 0x0000, 0x4242, 0x4544, 0x0000, 0x0000,
                    0x4200, 0x4442, 0x0000, 0x0000, 0x0000, 0x4242, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x4444, 0x4545, 0x4244, 0x4242, 0x4442, 0x4544, 0x4445, 0x4242, 0x4444, 0x4544,
                    0x4444, 0x4242, 0x4545, 0x4444, 0x4244, 0x4241, 0x4545, 0x4444, 0x4242, 0x4242,
                    0x4444, 0x4244, 0x0042, 0x0000, 0x4242, 0x4142, 0x0042, 0x0000, 0x0000, 0x4200,
                    0x0042, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0042, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4700, 0x0000, 0x0000,
                    0x0000, 0x4700, 0x0000, 0x0000, 0x0000, 0x4747, 0x0000, 0x4447, 0x4444, 0x4444,
                    0x0000, 0x4447, 0x4445, 0x4545, 0x0000, 0x4447, 0x4545, 0x4545, 0x0000, 0x4447,
                    0x4545, 0x4545, 0x0000, 0x4447, 0x4545, 0x4347, 0x4747, 0x4447, 0x4545, 0x4545,
                    0x4747, 0x4444, 0x4544, 0x4444, 0x4444, 0x4544, 0x4545, 0x4545, 0x4444, 0x4744,
                    0x0000, 0x0000, 0x4544, 0x4744, 0x0000, 0x0000, 0x4545, 0x4744, 0x0000, 0x0000,
                    0x4545, 0x4744, 0x0000, 0x0000, 0x4347, 0x4744, 0x0047, 0x0000, 0x4545, 0x4744,
                    0x0047, 0x0000, 0x4445, 0x4744, 0x0047, 0x0000, 0x4545, 0x4744, 0x0047, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4747, 0x0000, 0x0000, 0x4700, 0x4747,
                    0x0000, 0x0000, 0x4700, 0x4747, 0x0000, 0x0000, 0x4700, 0x4747, 0x0000, 0x0000,
                    0x4747, 0x4747, 0x0000, 0x4700, 0x4747, 0x4747, 0x0000, 0x4747, 0x4747, 0x4747,
                    0x4700, 0x4747, 0x4747, 0x4747, 0x4444, 0x4445, 0x4445, 0x4145, 0x4544, 0x4545,
                    0x4545, 0x4545, 0x4444, 0x4445, 0x4445, 0x4444, 0x4544, 0x4545, 0x4445, 0x4444,
                    0x4444, 0x4445, 0x4445, 0x4444, 0x4443, 0x4544, 0x4445, 0x4444, 0x4341, 0x4544,
                    0x4445, 0x4444, 0x4341, 0x4544, 0x4445, 0x4444, 0x4141, 0x4744, 0x4747, 0x4747,
                    0x4545, 0x4744, 0x4747, 0x4447, 0x4445, 0x4444, 0x4444, 0x4444, 0x4545, 0x4444,
                    0x4444, 0x4444, 0x4445, 0x4744, 0x4747, 0x4447, 0x4545, 0x0044, 0x0000, 0x4747,
                    0x4445, 0x4744, 0x4747, 0x4747, 0x4444, 0x4444, 0x4444, 0x4444, 0x4747, 0x0000,
                    0x0000, 0x0000, 0x4744, 0x0000, 0x0000, 0x0000, 0x4747, 0x0000, 0x0000, 0x0000,
                    0x4747, 0x0000, 0x0000, 0x0000, 0x4744, 0x0000, 0x0000, 0x0000, 0x4747, 0x0000,
                    0x0000, 0x0000, 0x4444, 0x0047, 0x0000, 0x0000, 0x4744, 0x0047, 0x0000, 0x0000,
                    0x4700, 0x4747, 0x4747, 0x4747, 0x4747, 0x4747, 0x4747, 0x4747, 0x4700, 0x4747,
                    0x4747, 0x4747, 0x4700, 0x4747, 0x4747, 0x4747, 0x0000, 0x4747, 0x4747, 0x4747,
                    0x0000, 0x4700, 0x4747, 0x4747, 0x0000, 0x0000, 0x4747, 0x4747, 0x0000, 0x0000,
                    0x4700, 0x4747, 0x4443, 0x4544, 0x4445, 0x4444, 0x4444, 0x4545, 0x4545, 0x4545,
                    0x4544, 0x4445, 0x4445, 0x4445, 0x4544, 0x4545, 0x4545, 0x4545, 0x4544, 0x4445,
                    0x4445, 0x4445, 0x4444, 0x4444, 0x4444, 0x4444, 0x4544, 0x4545, 0x4744, 0x4444,
                    0x4444, 0x4545, 0x4444, 0x4447, 0x4444, 0x4444, 0x4444, 0x4444, 0x4545, 0x4744,
                    0x4747, 0x4747, 0x4445, 0x4744, 0x0000, 0x4747, 0x4545, 0x4744, 0x0000, 0x0000,
                    0x4445, 0x4744, 0x0000, 0x0000, 0x4444, 0x0044, 0x0000, 0x0000, 0x4445, 0x4744,
                    0x4747, 0x4747, 0x4444, 0x4445, 0x4747, 0x4747, 0x4744, 0x0047, 0x0000, 0x0000,
                    0x4444, 0x0047, 0x0000, 0x0000, 0x4747, 0x0047, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x4747, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x4447, 0x4544, 0x4445, 0x4744, 0x4747, 0x4447, 0x4445, 0x4445, 0x0000, 0x4747,
                    0x4444, 0x4545, 0x0000, 0x4700, 0x4447, 0x4545, 0x0000, 0x0000, 0x4747, 0x4544,
                    0x0000, 0x0000, 0x4700, 0x4447, 0x0000, 0x0000, 0x0000, 0x4747, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x4444, 0x4545, 0x4744, 0x4747, 0x4447, 0x4544, 0x4445, 0x4747,
                    0x4444, 0x4544, 0x4444, 0x4747, 0x4545, 0x4444, 0x4744, 0x4742, 0x4545, 0x4444,
                    0x4747, 0x4747, 0x4444, 0x4744, 0x0047, 0x0000, 0x4747, 0x4247, 0x0047, 0x0000,
                    0x0000, 0x4700, 0x0047, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0047, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,};

const u16 robotspritePalette[] = {
                    0x0000, 0x0002, 0x043E, 0x0C7A, 0x18D6, 0x1CEC, 0x0853, 0x042F, 0x042A, 0x211E,
                    0x2D7D, 0x463D, 0x5ADD, 0x7426, 0x5CE9, 0x3D09, 0x20A6, 0x5024, 0x2802, 0x750B,
                    0x75D0, 0x7654, 0x76F8, 0x0BA6, 0x16E8, 0x1DE8, 0x1926, 0x06A5, 0x0562, 0x1FAB,
                    0x3FB1, 0x57B6, 0x0BBD, 0x1339, 0x1E10, 0x194A, 0x06B5, 0x01EF, 0x0129, 0x1BBD,
                    0x2FBD, 0x47BD, 0x5BBD, 0x09FC, 0x15D6, 0x1D70, 0x190A, 0x0575, 0x0510, 0x00CB,
                    0x161C, 0x2A7C, 0x3ABD, 0x5B5E, 0x7458, 0x5CD4, 0x40EF, 0x28EA, 0x5432, 0x402D,
                    0x2808, 0x74F9, 0x755A, 0x763B, 0x76DC, 0x6B83, 0x52C6, 0x3E08, 0x2946, 0x4EA2,
                    0x3E01, 0x2D81, 0x6FA9, 0x6FAE, 0x73B3, 0x77B8, 0x294A, 0x4A52, 0x6B5A, 0x7FFF,
                    0x2529, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
                    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,};
# 3 "main.c" 2
# 1 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 1 3





# 1 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 1 3
# 13 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 3
# 1 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/_ansi.h" 1 3
# 15 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/_ansi.h" 3
# 1 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/newlib.h" 1 3
# 16 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/_ansi.h" 2 3
# 1 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/config.h" 1 3



# 1 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/machine/ieeefp.h" 1 3
# 5 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/config.h" 2 3
# 17 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/_ansi.h" 2 3
# 14 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 2 3
# 1 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/_types.h" 1 3
# 12 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/_types.h" 3
typedef long _off_t;
__extension__ typedef long long _off64_t;


typedef int _ssize_t;





# 1 "C:/Users/Eric/Desktop/VHAM/gcc-arm/lib/gcc-lib/arm-thumb-elf/3.3.2/include/stddef.h" 1 3 4
# 354 "C:/Users/Eric/Desktop/VHAM/gcc-arm/lib/gcc-lib/arm-thumb-elf/3.3.2/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 23 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/_types.h" 2 3


typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;

typedef int _flock_t;
# 15 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 2 3




typedef unsigned long __ULong;
# 40 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 3
struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};
# 68 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 3
struct _atexit {
        struct _atexit *_next;
        int _ind;
        void (*_fns[32])(void);
        void *_fnargs[32];
        __ULong _fntypes;
};
# 91 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 3
struct __sbuf {
        unsigned char *_base;
        int _size;
};






typedef long _fpos_t;
# 156 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (*_read) (void * _cookie, char *_buf, int _n);
  int (*_write) (void * _cookie, const char *_buf, int _n);

  _fpos_t (*_seek) (void * _cookie, _fpos_t _offset, int _whence);
  int (*_close) (void * _cookie);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  int _offset;


  struct _reent *_data;



  _flock_t _lock;

};
# 249 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 3
typedef struct __sFILE __FILE;


struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 280 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 532 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];

  int _current_category;
  const char *_current_locale;

  int __sdidinit;

  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;


  struct _atexit *_atexit;
  struct _atexit _atexit0;


  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};
# 728 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/sys/reent.h" 3
extern struct _reent *_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 7 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 2 3










union __dmath
{
  __ULong i[2];
  double d;
};




extern const union __dmath __infinity[];
# 35 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);
# 72 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 3
typedef float float_t;
typedef double double_t;
# 82 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 3
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
# 121 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 3
extern double infinity (void);
extern double nan (void);
extern int isnan (double);
extern int isinf (double);
extern int finite (double);
extern double copysign (double, double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern double round (double);
extern long int lround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double copysign (double, double);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);
extern void sincos (double, double *, double *);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double gamma_r (double, int *);
extern double lgamma (double);
extern double lgamma_r (double, int *);
extern double erf (double);
extern double erfc (double);
extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern double hypot (double, double);


extern double cabs();
extern double drem (double, double);
# 189 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 3
extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);
# 221 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 3
extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float copysignf (float, float);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (void);
extern int isnanf (float);
extern int isinff (float);
extern int finitef (float);
extern float copysignf (float, float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);
extern void sincosf (float, float *, float *);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float gammaf_r (float, int *);
extern float lgammaf (float);
extern float lgammaf_r (float, int *);
extern float erff (float);
extern float erfcf (float);
extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);

extern float hypotf (float, float);

extern float cabsf();
extern float dremf (float, float);






extern int *__signgam (void);
# 290 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 3
struct exception

{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};




extern int matherr (struct exception *e);
# 345 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 3
enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};




extern const enum __fdlibm_version __fdlib_version;
# 365 "C:/Users/Eric/Desktop/VHAM/gcc-arm/arm-thumb-elf/include/math.h" 3

# 4 "main.c" 2
# 17 "main.c"
extern const u16 levelone_Map[];
extern const u16 levelonehitmap_Map[];
extern const u16 levelone_Palette[];
extern const u8 levelone_Tiles[];
extern const u16 levelonelandscape_Map[];
extern const short sin_lut[];

u16* levelOneMap =(u16*)(((30)*0x800)+0x6000000);
u16* levelOneHitMap = (u16*)(((20)*0x800)+0x6000000);
u16* levelOneLandscapeMap = (u16*)(((15)*0x800)+0x6000000);

volatile u32 *BUTTONS = (volatile u32*)0x04000130;

inline s32 lu_sin(u32 theta)
{ return sin_lut[(theta>>7)&0x1FF]; }

inline s32 lu_cos(u32 theta)
{ return sin_lut[((theta>>7)+128)&0x1FF]; }

typedef struct tagSprite
{
        u16 attribute0;
        u16 attribute1;
        u16 attribute2;
        s16 attribute3;
} __attribute__((aligned(4))) Sprite,*pSprite;

typedef struct OBJ_AFFINE
{
    u16 fill0[3];
    s16 pa;
    u16 fill1[3];
    s16 pb;
    u16 fill2[3];
    s16 pc;
    u16 fill3[3];
    s16 pd;
} __attribute__((aligned(4))) OBJ_AFFINE;

typedef struct tagAnimationHandler {
        int numFrames, currFrame;
        int frameLocation[2];
} AnimationHandler;

typedef struct tagAngleInfo {
        float cosAngle, sinAngle;
        float slopeFactor;
} AngleInfo;

typedef struct tagSpriteHandler
{
        int x, y;
        int mode;
        int worldx, worldy;
        int size;
        float acc, dec, xspd, yspd;
        float gspd, maxGspd;
        int width, height;
        int alive;
        int dir;
        int flipped;
        AngleInfo angle;
        AnimationHandler standing;
        AnimationHandler running;
        AnimationHandler jumpUp;
        AnimationHandler jumpDown;
} SpriteHandler;

int NextFrameLocation(AnimationHandler *handler) {
        if(handler->currFrame >= handler->numFrames - 1)
            handler->currFrame = -1;
        return handler->frameLocation[++handler->currFrame];
}

Sprite sprites[128];
SpriteHandler spriteHandlers[128];

typedef struct BgInfo {
    int x, y ;
        int dx, dy;
        int backgroundNextCol, backgroundPrevCol;
        int backgroundNextRow, backgroundPrevRow;
        int xNextCol;
        int xPrevCol;
        int yNextRow;
        int yPrevRow;
} BgInfo;

BgInfo world, levelOne;

u16 __key_curr=0, __key_prev=0;

inline void ButtonPoll()
{
        __key_prev = __key_curr;
        __key_curr = ~*BUTTONS & 0x03FF;
}

inline u32 key_curr_state() { return __key_curr; }
inline u32 key_prev_state() { return __key_prev; }
inline u32 key_is_down(u32 key) { return __key_curr & key; }
inline u32 key_is_up(u32 key) { return ~__key_curr & key; }
inline u32 key_was_down(u32 key) { return __key_prev & key; }
inline u32 key_was_up(u32 key) { return ~__key_prev & key; }
inline u32 key_released(u32 key)
{ return (~__key_curr & __key_prev) & key; }
inline u32 key_held(u32 key)
{ return ( __key_curr & __key_prev) & key; }
inline u32 key_hit(u32 key)
{ return ( __key_curr &~ __key_prev) & key; }

void WaitVBlank(void)
{
        while(*(volatile unsigned short*)0x04000006 >= 160);
        while(*(volatile unsigned short*)0x04000006 < 160);
}

void DMAFastCopy(void* source, void* dest, u32 count,
    u32 mode)
{
    if (mode == (0x80000000 | 0x00000000 | 0x00000000) || mode == (0x80000000 | 0x00000000 | 0x04000000))
    {
        *(volatile unsigned int*)0x40000D4 = (u32)source;
        *(volatile unsigned int*)0x40000D8 = (u32)dest;
        *(volatile unsigned int*)0x40000DC = count | mode;
    }
}



void copyColumn(int screenXCol, int screenYOff, int bgYOff, int bgColumn,
        u16* toMap, const u16* fromMap, int mapWidth)
{
        screenXCol = screenXCol % 32;
        int i;
        for(i = 0; i < 32; i++)
        {
                toMap[screenXCol + ((i+screenYOff)%32) * 32] =
                        fromMap[bgColumn+(mapWidth*(i+bgYOff))];
        }
}


void copyRow(int screenXOff, int screenYRow, int bgXOff, int bgRow,
        u16* toMap, const u16* fromMap, int mapWidth)
{
        int i;
        for(i = 0; i < 32; i++)
        {
                toMap[((i+screenXOff)%32) + screenYRow * 32] =
                        fromMap[(bgXOff + i) + (mapWidth*bgRow)];
        }
}

void UpdateSpriteMemory(void)
{
        DMAFastCopy((void*)sprites, (void*)((unsigned short*)0x7000000), 512, (0x80000000 | 0x00000000 | 0x00000000));
}

void InitMaps() {
    *(volatile unsigned short*)0x4000008 = 0x80 | 0x0 | (30 << 8);
    *(volatile unsigned short*)0x400000A = 0x80 | 0x0 | (15 << 8);
        *(volatile unsigned short*)0x400000C = 0x80 | 0x0 | (20 << 8);

        levelOne.x = 16, levelOne.y = 16;
        levelOne.dx = 0, levelOne.dy = 0;
        levelOne.backgroundNextCol = 33, levelOne.backgroundPrevCol = 0;
        levelOne.backgroundNextRow = 33, levelOne.backgroundPrevRow = 0;
        levelOne.xNextCol = 1;
        levelOne.xPrevCol = 0;
        levelOne.yNextRow = 1;
        levelOne.yPrevRow = 0;

        *(volatile unsigned short*)0x4000012 = levelOne.y;
        *(volatile unsigned short*)0x4000010 = levelOne.x;
        *(volatile unsigned short*)0x4000016 = 0;
        *(volatile unsigned short*)0x4000014 = 0;

        int i;

        for(i = 1; i < 33; i++)
        {
                copyColumn(i, levelOne.yPrevRow + 1, levelOne.backgroundPrevCol + 1, i,
                        levelOneHitMap, levelonehitmap_Map, 400);
        }
        for(i = 1; i < 33; i++)
        {
                copyColumn(i, levelOne.yPrevRow + 1, levelOne.backgroundPrevCol + 1, i,
                        levelOneMap, levelone_Map, 400);
        }
        for(i = 0; i < 32; i++)
        {
                copyColumn(i, 0, 0, i,
                        levelOneLandscapeMap, levelonelandscape_Map, 30);
        }
}

void InitSprites() {
    int n;
        for(n = 0; n < 128; n++)
        {
                sprites[n].attribute0 = 160;
                sprites[n].attribute1 = 240;
        }

        spriteHandlers[0].alive = 1;
        spriteHandlers[0].flipped = 0;
        spriteHandlers[0].width = 32;
        spriteHandlers[0].height = 32;
        spriteHandlers[0].standing.frameLocation[0] = 0;
        spriteHandlers[0].standing.frameLocation[1] = 32;
        spriteHandlers[0].running.frameLocation[0] = 64;
        spriteHandlers[0].running.frameLocation[1] = 96;
        spriteHandlers[0].jumpUp.frameLocation[0] = 128;
        spriteHandlers[0].jumpUp.frameLocation[1] = 160;
        spriteHandlers[0].jumpDown.frameLocation[0] = 192;
        spriteHandlers[0].jumpDown.frameLocation[1] = 224;
        spriteHandlers[0].standing.currFrame = 0;
        spriteHandlers[0].running.currFrame = 0;
        spriteHandlers[0].jumpUp.currFrame = 0;
        spriteHandlers[0].jumpDown.currFrame = 0;
        spriteHandlers[0].standing.numFrames = 2;
        spriteHandlers[0].running.numFrames = 2;
        spriteHandlers[0].jumpUp.numFrames = 2;
        spriteHandlers[0].jumpDown.numFrames = 2;
        spriteHandlers[0].x = 50;
        spriteHandlers[0].y = 50;
        spriteHandlers[0].xspd = 0;
        spriteHandlers[0].yspd = 0;
        spriteHandlers[0].gspd = 0;
        spriteHandlers[0].maxGspd = 4;
        spriteHandlers[0].acc = .25;
        spriteHandlers[0].dec = 0;
        spriteHandlers[0].mode = 1;
        spriteHandlers[0].dir = 1;
        spriteHandlers[0].angle.cosAngle = 1;
        spriteHandlers[0].angle.sinAngle = 0;
        spriteHandlers[0].angle.slopeFactor = 0;
        spriteHandlers[0].worldx = spriteHandlers[0].x + levelOne.x;
        spriteHandlers[0].worldy = spriteHandlers[0].y + levelOne.y;
        sprites[0].attribute0 = 0x2000 | 0x0 | spriteHandlers[0].x;
        sprites[0].attribute1 = 0x8000 | spriteHandlers[0].y;
        sprites[0].attribute2 = spriteHandlers[0].standing.frameLocation[0];
}

void Initialize() {
        *(unsigned long*) 0x4000000 = (0x0 | 0x100 | 0x200 | 0x400 | 0x1000 | 0x40);

        InitMaps();
        InitSprites();
}

void LoadContent() {
        DMAFastCopy((void*)levelone_Palette,(void*)((unsigned short*)0x5000000),256,(0x80000000 | 0x00000000 | 0x00000000));
        DMAFastCopy((void*)levelone_Tiles,(void*)(((0)*0x4000)+0x6000000),7744/4,(0x80000000 | 0x00000000 | 0x04000000));
        DMAFastCopy((void*)robotspritePalette,(void*)((unsigned short*) 0x5000200),256,(0x80000000 | 0x00000000 | 0x00000000));

        int n;
        for(n = 0; n < 4096; n++)
                ((unsigned short*) 0x6010000)[n] = robotspriteData[n];
}

void moveViewport() {
        int nx = spriteHandlers[0].worldx - 120 + spriteHandlers[0].width/2;
        if(spriteHandlers[0].worldx < 1600 && spriteHandlers[0].worldx > 119 + spriteHandlers[0].width/2)
        {
        levelOne.dx += nx - levelOne.x;
            levelOne.x = nx;
        }
        int ny = spriteHandlers[0].worldy - 80 + spriteHandlers[0].height/2;
        if(spriteHandlers[0].worldy < 2400 && spriteHandlers[0].worldy > 79 + spriteHandlers[0].height/2)
        {
        levelOne.dy += ny - levelOne.y;
            levelOne.y = ny;
        }
}

void setSpriteLoc(SpriteHandler *sprite, int x, int y) {
        if(x >= 0 && x < 1600) {
            sprite->worldx = x;
            sprite->x = sprite->worldx - levelOne.x;
        }

        if(y >= 0 && y < 2400) {
            sprite->worldy = y;
            sprite->y = sprite->worldy - levelOne.y;
        }
}


int checkSolidCollision(int x, int y) {
        int rval = 0;
        u16 tileStart = levelonehitmap_Map[(x/8) + (400 * (y/8))] * 64;
        u8 pixel = levelone_Tiles[tileStart + (x%8) + (8*(y%8))];
        if(9 == pixel || 10 == pixel || 4 == pixel) {
                rval = 1;
        }
        return rval;
}



int checkSolidCollisionSet(SpriteHandler *sprite, int x, int y) {
        int rval = 0;
        u16 tileStart = levelonehitmap_Map[(x/8) + (400 * (y/8))] * 64;
        u8 pixel = levelone_Tiles[tileStart + (x%8) + (8*(y%8))];
        if(9 == pixel) {
                rval = 1;
                sprite->angle.sinAngle = 0;
                sprite->angle.cosAngle = 1;
                sprite->angle.slopeFactor = 0;
        }
        if(10 == pixel) {
                rval = 1;
                sprite->angle.sinAngle = .7;
                sprite->angle.cosAngle = .7;
                sprite->angle.slopeFactor = .15;
        }
        if(4 == pixel) {
                rval = 1;
                sprite->angle.sinAngle = .7;
                sprite->angle.cosAngle = .7;
                sprite->angle.slopeFactor = -.15;
        }
        return rval;
}



int checkABSensors(SpriteHandler *sprite, int nextX, int nextY) {
        int i;
        int leftX = nextX + 2;
        int rightX = nextX + sprite->width - 4;
        int y = nextY + sprite->height/2;
        int max = sprite->height/2 + 8;
        for(i = 0; i < max; i++) {
                if(checkSolidCollisionSet(sprite,leftX,y+i)) {
                        return y+i-sprite->height;
                }
                if(checkSolidCollisionSet(sprite,rightX,y+i)) {
                        return y+i-sprite->height;
                }
        }
        return nextY;
}

void move(SpriteHandler *sprite, int x, int y) {
        if(sprite->mode == 0) {
                if(!checkSolidCollision(((sprite->flipped) ? x :
                         x + sprite->width - 4), y + 4)) {
                int newY;
                newY = checkABSensors(sprite,x,y);
                moveViewport();
                        setSpriteLoc(sprite,x,newY);
                }
        } else if(sprite->mode == 1) {
        if(checkSolidCollision(((sprite->flipped) ? x :
                         x + sprite->width - 4), y + 4)) {
                        x = sprite->worldx;
                }
        int newY = checkABSensors(sprite,x,y);
                if(newY == y || sprite->yspd < 0) {
                        moveViewport();
                        setSpriteLoc(sprite,x,y);
                } else {
                        sprite->mode = 0;
                        sprite->yspd = 0;
                        moveViewport();
                        setSpriteLoc(sprite,x,newY);
                }
        }
}

void Update() {
    ButtonPoll();
    if(spriteHandlers[0].mode == 0)
    {
                if(key_is_down(0x0020))
                {
                        if(!checkSolidCollision(spriteHandlers[0].worldx+1,
                                spriteHandlers[0].worldy + 4)) {
                                if(spriteHandlers[0].gspd + spriteHandlers[0].acc < spriteHandlers[0].maxGspd)
                                        spriteHandlers[0].gspd += spriteHandlers[0].acc;
                        }
                        if(!spriteHandlers[0].flipped) {
                                        spriteHandlers[0].flipped = 1;
                                        sprites[0].attribute1 =
                                                ((sprites[0].attribute1) | 0x1000);
                        }
                        spriteHandlers[0].dir = -1;
                }
                if(key_is_down(0x0010))
                {
                if(!checkSolidCollision(spriteHandlers[0].worldx +
                                spriteHandlers[0].width - 4, spriteHandlers[0].worldy + 4)) {
                                if(spriteHandlers[0].gspd + spriteHandlers[0].acc < spriteHandlers[0].maxGspd)
                                        spriteHandlers[0].gspd += spriteHandlers[0].acc;
                        }
                        if(spriteHandlers[0].flipped) {
                                        spriteHandlers[0].flipped = 0;
                                        sprites[0].attribute1 =
                                                ((sprites[0].attribute1) & 0xCFFF);
                        }
                        spriteHandlers[0].dir = 1;
                }
                if(key_hit(0x0001))
                {
                        spriteHandlers[0].mode = 1;
                        spriteHandlers[0].yspd = -5;
                }
                spriteHandlers[0].gspd = spriteHandlers[0].gspd +
                        ((spriteHandlers[0].angle.slopeFactor * spriteHandlers[0].dir)
                        * spriteHandlers[0].angle.sinAngle) - .05;

                if(spriteHandlers[0].gspd < 0)
                    spriteHandlers[0].gspd = 0;

        spriteHandlers[0].xspd = (spriteHandlers[0].gspd * spriteHandlers[0].angle.cosAngle) *
                        spriteHandlers[0].dir;
                if(spriteHandlers[0].mode != 1)
                        spriteHandlers[0].yspd = (spriteHandlers[0].gspd*spriteHandlers[0].angle.sinAngle);

        if(spriteHandlers[0].xspd == 0) {
            sprites[0].attribute2=NextFrameLocation(&(spriteHandlers[0].standing));
        } else {
            sprites[0].attribute2=NextFrameLocation(&(spriteHandlers[0].running));
                }
        }

        if(spriteHandlers[0].mode == 1)
        {
                if(spriteHandlers[0].yspd < 10)
                        spriteHandlers[0].yspd = spriteHandlers[0].yspd + .25;

                if(spriteHandlers[0].yspd < 0) {
            sprites[0].attribute2=NextFrameLocation(&(spriteHandlers[0].jumpUp));
                } else {
            sprites[0].attribute2=NextFrameLocation(&(spriteHandlers[0].jumpDown));
                }
        }

        move(&spriteHandlers[0],spriteHandlers[0].worldx + spriteHandlers[0].xspd,
                spriteHandlers[0].worldy + spriteHandlers[0].yspd);
        if(spriteHandlers[0].x < 240 && spriteHandlers[0].x >= 0)
                sprites[0].attribute1 = (((sprites[0].attribute1) & 0xFE00) | spriteHandlers[0].x);
        if(spriteHandlers[0].y >= 0 && spriteHandlers[0].y < 160)
                sprites[0].attribute0 = (((sprites[0].attribute0) & 0xFF00) | spriteHandlers[0].y);
}

void DrawLevelBackground() {
    if(levelOne.dx > 7)
        {
                int inc = levelOne.dx / 8;
                levelOne.dx = levelOne.dx % 8;
                int i;
                for(i = 0; i < inc; i++) {
                        copyColumn(levelOne.xNextCol, levelOne.yPrevRow + 1,
                                levelOne.backgroundPrevRow + 1, levelOne.backgroundNextCol,
                                levelOneMap, levelone_Map, 400);
                        copyColumn(levelOne.xNextCol, levelOne.yPrevRow + 1,
                                levelOne.backgroundPrevRow + 1, levelOne.backgroundNextCol,
                                levelOneHitMap, levelonehitmap_Map, 400);
                        levelOne.backgroundPrevCol++;
                        levelOne.backgroundNextCol++;
                        levelOne.xNextCol = (levelOne.xNextCol + 1) % 32;
                        levelOne.xPrevCol = (levelOne.xPrevCol + 1) % 32;
                }
        }
        if(levelOne.dx < -7)
        {
        int inc = abs(levelOne.dx / 8);
                levelOne.dx = levelOne.dx % 8;
                int i;
                for(i = 0; i < inc; i++) {
                        copyColumn(levelOne.xPrevCol, levelOne.yPrevRow + 1,
                                levelOne.backgroundPrevRow + 1, levelOne.backgroundPrevCol,
                                levelOneMap, levelone_Map, 400);
                        copyColumn(levelOne.xPrevCol, levelOne.yPrevRow + 1,
                                levelOne.backgroundPrevRow + 1, levelOne.backgroundPrevCol,
                                levelOneHitMap, levelonehitmap_Map, 400);
                        levelOne.backgroundNextCol--;
                        levelOne.backgroundPrevCol--;
                        if(levelOne.xPrevCol <= 0)
                                levelOne.xPrevCol = 31;
                        else
                            levelOne.xPrevCol--;

                        if(levelOne.xNextCol <= 0)
                            levelOne.xNextCol = 31;
                        else
                            levelOne.xNextCol--;
                }
        }
        if(levelOne.dy > 7)
        {
                int i;
                int inc = levelOne.dy / 8;
                levelOne.dy = levelOne.dy % 8;
            for(i = 0; i < inc; i++) {
                        copyRow(levelOne.xPrevCol + 1,levelOne.yNextRow,
                                levelOne.backgroundPrevCol + 1, levelOne.backgroundNextRow,
                                levelOneMap, levelone_Map, 400);
                        copyRow(levelOne.xPrevCol + 1,levelOne.yNextRow,
                                levelOne.backgroundPrevCol + 1, levelOne.backgroundNextRow,
                                levelOneHitMap, levelonehitmap_Map, 400);
                        levelOne.backgroundPrevRow++;
                        levelOne.backgroundNextRow++;
                        levelOne.yNextRow = (levelOne.yNextRow + 1) % 32;
                        levelOne.yPrevRow = (levelOne.yPrevRow + 1) % 32;
                }
        }
        if(levelOne.dy < -7)
        {
                int i;
                int inc = abs(levelOne.dy / 8);
                levelOne.dy = levelOne.dy % 8;
                for(i = 0; i < inc; i++) {
                        copyRow(levelOne.xPrevCol + 1,levelOne.yPrevRow,
                                levelOne.backgroundPrevCol + 1, levelOne.backgroundPrevRow,
                                levelOneMap, levelone_Map, 400);
                        copyRow(levelOne.xPrevCol + 1,levelOne.yPrevRow,
                                levelOne.backgroundPrevCol + 1, levelOne.backgroundPrevRow,
                                levelOneHitMap, levelonehitmap_Map, 400);
                        levelOne.backgroundNextRow--;
                        levelOne.backgroundPrevRow--;
                        if(levelOne.yPrevRow <= 0)
                                levelOne.yPrevRow = 31;
                        else
                            levelOne.yPrevRow--;

                        if(levelOne.yNextRow <= 0)
                            levelOne.yNextRow = 31;
                        else
                            levelOne.yNextRow--;
                }
        }
}

void Draw() {
    WaitVBlank();
        UpdateSpriteMemory();
        DrawLevelBackground();
        *(volatile unsigned short*)0x4000012 = levelOne.y;
        *(volatile unsigned short*)0x4000010 = levelOne.x;
        *(volatile unsigned short*)0x400001A = levelOne.y;
        *(volatile unsigned short*)0x4000018 = levelOne.x;
}

int main()
{
        Initialize();
        LoadContent();
        while(1)
        {
                Update();
                Draw();
        }
        return 0;
}
